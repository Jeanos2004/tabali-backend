# Generated by Django 5.1.4 on 2025-06-23 12:38

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('telephone', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Le numéro de téléphone doit être au format: '+999999999'. 15 chiffres maximum.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Téléphone')),
                ('user_type', models.CharField(choices=[('client', 'Client'), ('provider', 'Prestataire'), ('admin', 'Administrateur')], default='client', max_length=20, verbose_name='Type utilisateur')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='Longitude')),
                ('address', models.TextField(blank=True, verbose_name='Adresse complète')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='Ville')),
                ('postal_code', models.CharField(blank=True, max_length=10, verbose_name='Code postal')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Dernière modification')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Compte vérifié')),
                ('verification_token', models.CharField(blank=True, max_length=255, verbose_name='Token de vérification')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'db_table': 'tabali_users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClientProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_radius', models.PositiveIntegerField(default=10, help_text='Distance maximale pour la recherche de prestataires', verbose_name='Rayon de recherche préféré (km)')),
                ('total_reservations', models.PositiveIntegerField(default=0, verbose_name='Nombre total de réservations')),
                ('total_spent', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Montant total dépensé')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Dernière modification')),
                ('user', models.OneToOneField(limit_choices_to={'user_type': 'client'}, on_delete=django.db.models.deletion.CASCADE, related_name='client_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil Client',
                'verbose_name_plural': 'Profils Clients',
                'db_table': 'tabali_client_profiles',
            },
        ),
        migrations.CreateModel(
            name='ProviderProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(blank=True, max_length=200, verbose_name="Nom de l'entreprise")),
                ('siret', models.CharField(blank=True, max_length=14, unique=True, verbose_name='Numéro SIRET')),
                ('description', models.TextField(blank=True, verbose_name='Description des services')),
                ('hourly_rate', models.DecimalField(decimal_places=2, help_text='Tarif de base par heure', max_digits=6, verbose_name='Tarif horaire (€)')),
                ('service_radius', models.PositiveIntegerField(default=15, help_text='Distance maximale pour les interventions', verbose_name="Rayon d'intervention (km)")),
                ('profile_photo', models.ImageField(blank=True, null=True, upload_to='providers/photos/', verbose_name='Photo de profil')),
                ('insurance_document', models.FileField(blank=True, null=True, upload_to='providers/documents/', verbose_name="Attestation d'assurance")),
                ('is_available', models.BooleanField(default=True, verbose_name='Disponible actuellement')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Prestataire vérifié')),
                ('verification_date', models.DateTimeField(blank=True, null=True, verbose_name='Date de vérification')),
                ('total_jobs', models.PositiveIntegerField(default=0, verbose_name="Nombre total d'interventions")),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Gains totaux')),
                ('average_rating', models.DecimalField(decimal_places=2, default=0, help_text='Note moyenne basée sur les avis clients', max_digits=3, verbose_name='Note moyenne')),
                ('total_reviews', models.PositiveIntegerField(default=0, verbose_name="Nombre d'avis")),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Dernière modification')),
                ('user', models.OneToOneField(limit_choices_to={'user_type': 'provider'}, on_delete=django.db.models.deletion.CASCADE, related_name='provider_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil Prestataire',
                'verbose_name_plural': 'Profils Prestataires',
                'db_table': 'tabali_provider_profiles',
            },
        ),
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(choices=[(1, 'Lundi'), (2, 'Mardi'), (3, 'Mercredi'), (4, 'Jeudi'), (5, 'Vendredi'), (6, 'Samedi'), (7, 'Dimanche')], verbose_name='Jour de la semaine')),
                ('start_time', models.TimeField(verbose_name='Heure de début')),
                ('end_time', models.TimeField(verbose_name='Heure de fin')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to='accounts.providerprofile', verbose_name='Prestataire')),
            ],
            options={
                'verbose_name': 'Disponibilité',
                'verbose_name_plural': 'Disponibilités',
                'db_table': 'tabali_availabilities',
                'ordering': ['day_of_week', 'start_time'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['user_type'], name='tabali_user_user_ty_087365_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_verified'], name='tabali_user_is_veri_985d2e_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='tabali_user_created_461d19_idx'),
        ),
        migrations.AddIndex(
            model_name='providerprofile',
            index=models.Index(fields=['is_available'], name='tabali_prov_is_avai_fab2ec_idx'),
        ),
        migrations.AddIndex(
            model_name='providerprofile',
            index=models.Index(fields=['is_verified'], name='tabali_prov_is_veri_4f90d9_idx'),
        ),
        migrations.AddIndex(
            model_name='providerprofile',
            index=models.Index(fields=['average_rating'], name='tabali_prov_average_850387_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='availability',
            unique_together={('provider', 'day_of_week', 'start_time')},
        ),
    ]

# Generated by Django 5.1.4 on 2025-06-23 12:38

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nom de la catégorie')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('slug', models.SlugField(help_text='URL-friendly version du nom', unique=True, verbose_name='Slug')),
                ('icon', models.CharField(blank=True, help_text="Nom de l'icône pour l'interface utilisateur", max_length=50, verbose_name='Icône')),
                ('color', models.CharField(blank=True, help_text='Code couleur hexadécimal (ex: #FF5733)', max_length=7, verbose_name='Couleur')),
                ('order', models.PositiveIntegerField(default=0, verbose_name="Ordre d'affichage")),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Dernière modification')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='services.category', verbose_name='Catégorie parent')),
            ],
            options={
                'verbose_name': 'Catégorie',
                'verbose_name_plural': 'Catégories',
                'db_table': 'tabali_categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Nom du service')),
                ('description', models.TextField(verbose_name='Description détaillée')),
                ('service_type', models.CharField(choices=[('emergency', 'Urgence'), ('standard', 'Standard'), ('scheduled', 'Planifié'), ('maintenance', 'Maintenance')], default='standard', max_length=20, verbose_name='Type de service')),
                ('pricing_type', models.CharField(choices=[('hourly', 'Tarif horaire'), ('fixed', 'Tarif fixe'), ('quote', 'Sur devis')], default='hourly', max_length=20, verbose_name='Type de tarification')),
                ('base_price', models.DecimalField(blank=True, decimal_places=2, help_text='Prix de base selon le type de tarification', max_digits=8, null=True, verbose_name='Prix de base')),
                ('estimated_duration_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Durée estimée (heures)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Service mis en avant')),
                ('popularity_score', models.PositiveIntegerField(default=0, verbose_name='Score de popularité')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Dernière modification')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='services.category', verbose_name='Catégorie')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
                'db_table': 'tabali_services',
                'ordering': ['-popularity_score', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProviderService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_price', models.DecimalField(blank=True, decimal_places=2, help_text='Prix spécifique du prestataire pour ce service', max_digits=8, null=True, verbose_name='Prix personnalisé')),
                ('experience_years', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(50)], verbose_name="Années d'expérience")),
                ('description', models.TextField(blank=True, help_text='Description spécifique du prestataire pour ce service', verbose_name='Description personnalisée')),
                ('is_available', models.BooleanField(default=True, verbose_name='Disponible')),
                ('minimum_duration', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Durée minimum (heures)')),
                ('total_bookings', models.PositiveIntegerField(default=0, verbose_name='Nombre de réservations')),
                ('average_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, verbose_name='Note moyenne')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Dernière modification')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='provider_services', to='accounts.providerprofile', verbose_name='Prestataire')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='provider_services', to='services.service', verbose_name='Service')),
            ],
            options={
                'verbose_name': 'Service du prestataire',
                'verbose_name_plural': 'Services des prestataires',
                'db_table': 'tabali_provider_services',
            },
        ),
        migrations.CreateModel(
            name='ServiceImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Image illustrant le service', upload_to='services/images/', verbose_name='Image')),
                ('alt_text', models.CharField(help_text="Description de l'image pour l'accessibilité", max_length=200, verbose_name='Texte alternatif')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Image principale')),
                ('order', models.PositiveIntegerField(default=0, verbose_name="Ordre d'affichage")),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='services.service', verbose_name='Service')),
            ],
            options={
                'verbose_name': 'Image de service',
                'verbose_name_plural': 'Images de services',
                'db_table': 'tabali_service_images',
                'ordering': ['order'],
            },
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['is_active'], name='tabali_cate_is_acti_e3434c_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['parent'], name='tabali_cate_parent__867ab5_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['order'], name='tabali_cate_order_3ad024_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['category'], name='tabali_serv_categor_f2a78e_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['service_type'], name='tabali_serv_service_f7e248_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['is_active'], name='tabali_serv_is_acti_406d60_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['is_featured'], name='tabali_serv_is_feat_0fa130_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['-popularity_score'], name='tabali_serv_popular_193e12_idx'),
        ),
        migrations.AddIndex(
            model_name='providerservice',
            index=models.Index(fields=['provider'], name='tabali_prov_provide_641bca_idx'),
        ),
        migrations.AddIndex(
            model_name='providerservice',
            index=models.Index(fields=['service'], name='tabali_prov_service_52745d_idx'),
        ),
        migrations.AddIndex(
            model_name='providerservice',
            index=models.Index(fields=['is_available'], name='tabali_prov_is_avai_c53659_idx'),
        ),
        migrations.AddIndex(
            model_name='providerservice',
            index=models.Index(fields=['-average_rating'], name='tabali_prov_average_876e1e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='providerservice',
            unique_together={('provider', 'service')},
        ),
    ]

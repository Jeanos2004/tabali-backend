#!/usr/bin/env python
"""
Script d'initialisation pour la plateforme Tabali.

Ce script permet de configurer rapidement l'environnement de d√©veloppement
et de tester que tout fonctionne correctement.
"""

import os
import sys
import django
from django.core.management import execute_from_command_line

def setup_django():
    """Configure l'environnement Django."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tabali_platform.settings')
    django.setup()

def check_requirements():
    """V√©rifie que toutes les d√©pendances sont install√©es."""
    try:
        import rest_framework
        import corsheaders
        import drf_spectacular
        import psycopg2
        import redis
        import celery
        import PIL
        print("‚úÖ Toutes les d√©pendances sont install√©es")
        return True
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante: {e}")
        print("üí° Ex√©cutez: pip install -r requirements.txt")
        return False

def create_env_file():
    """Cr√©e un fichier .env de base s'il n'existe pas."""
    env_file = '.env'
    if not os.path.exists(env_file):
        env_content = """# Configuration Tabali Platform - D√©veloppement
DEBUG=True
SECRET_KEY=django-insecure-dev-key-change-in-production
ALLOWED_HOSTS=localhost,127.0.0.1

# Base de donn√©es (SQLite pour le dev)
USE_SQLITE=True
DATABASE_NAME=tabali_dev.db

# Redis (optionnel en dev)
REDIS_URL=redis://localhost:6379/0
CELERY_BROKER_URL=redis://localhost:6379/0

# Email (configuration de test)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=
EMAIL_HOST_PASSWORD=

# APIs externes (laissez vide pour le dev)
GOOGLE_MAPS_API_KEY=
STRIPE_PUBLIC_KEY=
STRIPE_SECRET_KEY=
"""
        
        with open(env_file, 'w') as f:
            f.write(env_content)
        print(f"‚úÖ Fichier {env_file} cr√©√©")
        return True
    else:
        print(f"‚úÖ Fichier {env_file} existe d√©j√†")
        return True

def run_migrations():
    """Ex√©cute les migrations de base de donn√©es."""
    try:
        print("üîÑ Ex√©cution des migrations...")
        execute_from_command_line(['manage.py', 'makemigrations'])
        execute_from_command_line(['manage.py', 'migrate'])
        print("‚úÖ Migrations termin√©es")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors des migrations: {e}")
        return False

def create_superuser():
    """Propose de cr√©er un superutilisateur."""
    try:
        from django.contrib.auth import get_user_model
        User = get_user_model()
        
        if not User.objects.filter(is_superuser=True).exists():
            print("\nüìã Cr√©ation d'un superutilisateur...")
            print("Vous pouvez laisser vide pour utiliser les valeurs par d√©faut:")
            
            email = input("Email (admin@tabali.com): ") or "admin@tabali.com"
            username = input("Username (admin): ") or "admin"
            password = input("Mot de passe (admin123): ") or "admin123"
            
            user = User.objects.create_superuser(
                username=username,
                email=email,
                password=password,
                first_name="Super",
                last_name="Admin",
                user_type="admin"
            )
            print(f"‚úÖ Superutilisateur cr√©√©: {email}")
            return True
        else:
            print("‚úÖ Un superutilisateur existe d√©j√†")
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du superutilisateur: {e}")
        return False

def load_sample_data():
    """Charge des donn√©es d'exemple."""
    try:
        from services.models import Category, Service
        
        # Cr√©er quelques cat√©gories d'exemple
        categories_data = [
            {'name': 'Plomberie', 'slug': 'plomberie', 'icon': 'wrench', 'color': '#3498db'},
            {'name': '√âlectricit√©', 'slug': 'electricite', 'icon': 'bolt', 'color': '#f39c12'},
            {'name': 'Jardinage', 'slug': 'jardinage', 'icon': 'leaf', 'color': '#27ae60'},
            {'name': 'Nettoyage', 'slug': 'nettoyage', 'icon': 'cleaning', 'color': '#9b59b6'},
        ]
        
        for cat_data in categories_data:
            category, created = Category.objects.get_or_create(
                slug=cat_data['slug'],
                defaults=cat_data
            )
            if created:
                print(f"‚úÖ Cat√©gorie cr√©√©e: {category.name}")
        
        # Cr√©er quelques services d'exemple
        if Category.objects.exists():
            plomberie = Category.objects.filter(slug='plomberie').first()
            if plomberie:
                services_data = [
                    {
                        'name': 'R√©paration fuite d\'eau',
                        'description': 'Intervention rapide pour r√©parer les fuites d\'eau',
                        'category': plomberie,
                        'service_type': 'emergency',
                        'base_price': 75.00,
                        'estimated_duration_hours': 2.0
                    },
                    {
                        'name': 'Installation robinet',
                        'description': 'Installation et remplacement de robinetterie',
                        'category': plomberie,
                        'service_type': 'standard',
                        'base_price': 120.00,
                        'estimated_duration_hours': 1.5
                    }
                ]
                
                for service_data in services_data:
                    service, created = Service.objects.get_or_create(
                        name=service_data['name'],
                        defaults=service_data
                    )
                    if created:
                        print(f"‚úÖ Service cr√©√©: {service.name}")
        
        print("‚úÖ Donn√©es d'exemple charg√©es")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement des donn√©es: {e}")
        return False

def test_api():
    """Test basique de l'API."""
    try:
        from django.test import Client
        
        client = Client()
        
        # Test de l'endpoint de documentation
        response = client.get('/api/docs/')
        if response.status_code in [200, 302]:  # 302 pour redirection
            print("‚úÖ Documentation API accessible")
        else:
            print(f"‚ö†Ô∏è  Documentation API: Status {response.status_code}")
        
        # Test de l'admin
        response = client.get('/admin/')
        if response.status_code in [200, 302]:
            print("‚úÖ Interface admin accessible")
        else:
            print(f"‚ö†Ô∏è  Interface admin: Status {response.status_code}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        return False

def main():
    """Fonction principale d'initialisation."""
    print("üöÄ Initialisation de la plateforme Tabali")
    print("=" * 50)
    
    # V√©rifications pr√©liminaires
    if not check_requirements():
        return False
    
    # Configuration de l'environnement
    if not create_env_file():
        return False
    
    # Configuration Django
    setup_django()
    
    # Migrations
    if not run_migrations():
        return False
    
    # Superutilisateur
    if not create_superuser():
        return False
    
    # Donn√©es d'exemple
    if not load_sample_data():
        print("‚ö†Ô∏è  Erreur lors du chargement des donn√©es d'exemple (non critique)")
    
    # Tests basiques
    if not test_api():
        print("‚ö†Ô∏è  Erreur lors des tests basiques (non critique)")
    
    print("\n" + "=" * 50)
    print("üéâ Initialisation termin√©e avec succ√®s!")
    print("\nüìö Prochaines √©tapes:")
    print("1. D√©marrez le serveur: python manage.py runserver")
    print("2. Acc√©dez √† l'API: http://localhost:8000/api/docs/")
    print("3. Interface admin: http://localhost:8000/admin/")
    print("4. Consultez le README.md pour plus d'informations")
    print("\nüë• Pour le travail en √©quipe:")
    print("- Chaque d√©veloppeur peut travailler sur son domaine (voir README)")
    print("- Utilisez Git pour le versioning")
    print("- Documentez vos APIs dans les docstrings")
    
    return True

if __name__ == '__main__':
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ùå Initialisation interrompue par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        sys.exit(1) 